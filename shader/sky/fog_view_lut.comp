#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive    : enable

#include "sky_common.glsl"

layout(binding = 0) uniform sampler2D tLUT;
layout(binding = 1) uniform sampler2D mLUT;
layout(binding = 2) uniform sampler2D cloudsLUT;
#ifdef COMPUTE
layout(binding = 3) uniform sampler2D textureSm1;
layout(binding = 4) uniform writeonly image3D fogLut;
layout(binding = 5, std140) uniform UboScene {
  vec3  sunDir;
  // float padd0;
  mat4  viewProject;
  mat4  viewProjectInv;
  mat4  viewShadow[2];
  vec3  ambient;
  vec4  sunCl;
  vec4  frustrum[6];
  vec3  clipInfo;
  // float padd1;
  vec3  camPos;
  // float padd2;
  vec2  screenResInv;
  } scene;
#endif

#ifdef COMPUTE
layout(local_size_x = 8, local_size_y = 8) in;
#else
layout(location = 0) in  vec2 inPos;
layout(location = 0) out vec4 outColor;
#endif

void store(ivec3 at, vec3 lum, vec3 trans) {
  const float t = (trans.x+trans.y+trans.z)/3.0;
#ifdef COMPUTE
  imageStore(fogLut, at, vec4(lum,t));
#else
  outColor = vec4(lum,t);
#endif
  }

vec3 project(mat4 m, vec3 pos) {
  vec4 p = m*vec4(pos,1);
  return p.xyz/p.w;
  }

float tStep(int i, int steps) {
  float t = float(i+0.3)/steps;
  return t;
  }

#if !defined(COMPUTE)
void main_frag() {
  const ivec3 dstUV  = ivec3(gl_FragCoord.xy,0);
  const int   steps  = 64;

  float dMin = 0;
  float dMax = 1;
  const vec3  pos0     = project(push.viewProjectInv,  vec3(inPos,dMin));
  const vec3  pos1     = project(push.viewProjectInv,  vec3(inPos,dMax));

  const float viewDistanceScale = 20;
  const vec3  ray               = pos1.xyz - pos0.xyz;
  const float dist              = length(ray)*0.01; // meters
  const vec3  dir               = normalize(ray);

  const vec3  sunDir             = vec3(push.sunDir);
  const float cosTheta           = dot(dir, sunDir);
  const float miePhaseValue      = miePhase(cosTheta);
  const float rayleighPhaseValue = rayleighPhase(-cosTheta);

  vec3  scatteredLight = vec3(0.0);
  vec3  transmittance  = vec3(1.0);
  float clouds         = textureLod(cloudsLUT, vec2(push.night,0), 0).a;

  for(int i=0; i<steps; ++i) {
    float t      = tStep(i,  steps);
    float tPrev  = tStep(i-1,steps);
    float dd     = (t - tPrev)*dist;

    vec3  pos    = mix(pos0,pos1,t)*0.01 + vec3(0,RPlanet,0);

    vec3  rayleighScattering;
    vec3  extinction;
    float mieScattering;
    scatteringValues(pos, clouds, rayleighScattering, mieScattering, extinction);

    vec3  sampleTransmittance = exp(-dd*extinction*viewDistanceScale);

    float shadow              = 1.0;
    vec3  sunTransmittance    = textureLUT(tLUT, pos, sunDir);
    vec3  psiMS               = textureLUT(mLUT, pos, sunDir);

    vec3 rayleighInScattering = rayleighScattering*(rayleighPhaseValue*sunTransmittance + psiMS);
    vec3 mieInScattering      = mieScattering     *(miePhaseValue     *sunTransmittance + psiMS);
    vec3 inScattering         = (rayleighInScattering + mieInScattering);

    // Integrated scattering within path segment.
    // See slide 28 at http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/
    vec3  scatteringIntegral  = (inScattering - inScattering * sampleTransmittance) / extinction;

    transmittance  *= sampleTransmittance;
    scatteredLight += scatteringIntegral*transmittance*shadow;

    store(ivec3(dstUV.xy,i), scatteredLight, transmittance);
    }
  }
#endif

#if defined(COMPUTE)
void main_comp() {
  const ivec3 dstSz = imageSize(fogLut);
  const ivec3 dstUV = ivec3(gl_GlobalInvocationID.xy,0);
  if(dstUV.x>=dstSz.x || dstUV.y>=dstSz.y)
    return;
  const vec2  inPos    = ((vec2(dstUV.xy)+vec2(0.5))/vec2(dstSz.xy))*2.0-vec2(1.0);
  const int   steps    = dstSz.z;

  const float dMin     = 0;
  const float dMax     = 0.9999;

  const vec3  pos0     = project(scene.viewProjectInv, vec3(inPos,dMin));
  const vec3  pos1     = project(scene.viewProjectInv, vec3(inPos,dMax));
  const vec4  shPos0   = scene.viewShadow[1]*vec4(pos0, 1);
  const vec4  shPos1   = scene.viewShadow[1]*vec4(pos1, 1);

  const float viewDistanceScale = 20;
  const vec3  ray               = pos1.xyz - pos0.xyz;
  const float dist              = length(ray)*0.01; // meters
  const vec3  dir               = normalize(ray);

  const vec3  sunDir             = vec3(push.sunDir);
  const float cosTheta           = dot(dir, sunDir);
  const float miePhaseValue      = miePhase(cosTheta);
  const float rayleighPhaseValue = rayleighPhase(-cosTheta);

  vec3  pos                 = pos0*0.01 + vec3(0,RPlanet,0);
  // vec3  sunTransmittance0   = textureLUT(tLUT, pos, sunDir);
  // vec3  psiMS0              = textureLUT(mLUT, pos, sunDir);

  vec3  scatteredLight = vec3(0.0);
  vec3  transmittance  = vec3(1.0);
  float clouds         = textureLod(cloudsLUT, vec2(push.night,0), 0).a;

  for(int i=0; i<steps; ++i) {
    float t      = tStep(i,  steps);
    float tPrev  = tStep(i-1,steps);
    float dd     = (t - tPrev)*dist;

    vec3  pos    = mix(pos0,pos1,t)*0.01 + vec3(0,RPlanet,0);

    vec3  rayleighScattering;
    vec3  extinction;
    float mieScattering;
    scatteringValues(pos, clouds, rayleighScattering, mieScattering, extinction);

    vec3  sampleTransmittance = exp(-dd*extinction*viewDistanceScale);
    vec3  sunTransmittance    = textureLUT(tLUT, pos, sunDir);
    vec3  psiMS               = textureLUT(mLUT, pos, sunDir);

    vec3 rayleighInScattering = rayleighScattering*(rayleighPhaseValue*sunTransmittance + psiMS);
    vec3 mieInScattering      = mieScattering     *(miePhaseValue     *sunTransmittance + psiMS);
    vec3 inScattering         = (rayleighInScattering + mieInScattering);

    // Integrated scattering within path segment.
    // See slide 28 at http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/
    vec3  scatteringIntegral  = (inScattering - inScattering * sampleTransmittance) / extinction;

    transmittance  *= sampleTransmittance;
    scatteredLight += scatteringIntegral*transmittance;
    store(ivec3(dstUV.xy,i), scatteredLight, transmittance);
    }
  }
#endif

void main() {
#if defined(COMPUTE)
  main_comp();
#else
  main_frag();
#endif
  }
